name: "Push Version Tags Action"
description: "Push Version Tags Action"

inputs:
  github_token:
    description: "Github token used for API calls. Required scope - 'contents: write'"

  version:
    description: "Base version to be used for tags. Should be in format {major}.{minor}.{patch} or v{major}.{minor}.{patch} (e.g. 1.2.3 or v1.2.3)"
    required: true

  major:
    description: "Weather to push major version tag"
    default: "true"

  minor:
    description: "Weather to push minor version tag"
    default: "true"

outputs:
  major_version:
    description: "Major version tag"
    value: ${{ steps.prepare-versions.outputs.major_version }}

  minor_version:
    description: "Minor version tag"
    value: ${{ steps.prepare-versions.outputs.minor_version }}

runs:
  using: "composite"
  steps:
    - name: Validate version format
      shell: bash
      run: |
        # Validate version format
        if [[ ! ${{ inputs.version }} =~ ^v?.+\..+\..+$ ]]; then
          echo "Invalid version format."
          echo "Should be in format {major}.{minor}.{patch} or v{major}.{minor}.{patch} (e.g. 1.2.3 or v1.2.3)"
          exit 1
        fi

    - name: Prepare versions
      id: prepare-versions
      shell: bash
      run: |
        # Prepare versions
        major=$(echo ${{ inputs.version }} | cut -d. -f1)
        minor=$(echo ${{ inputs.version }} | cut -d. -f2)
        patch=$(echo ${{ inputs.version }} | cut -d. -f3)

        major_version="${major}"
        echo "major_version=${major_version}" >> $GITHUB_OUTPUT

        minor_version="${major}.${minor}"
        echo "minor_version=${minor_version}" >> $GITHUB_OUTPUT

    - name: Ensure token
      id: ensure-token
      shell: bash
      run: |
        # Ensuring `github_token` input, using `github.token` variable if not provided
        github_token=${{ inputs.github_token }}
        if [[ -z "$github_token" ]]; then
          github_token=${{ github.token }}
        fi
        echo "github_token=${github_token}" >> $GITHUB_OUTPUT

    - name: Get tag info
      id: get-tag-info
      uses: ovsds/get-tag-info-action@v1
      with:
        github_token: ${{ steps.ensure-token.outputs.github_token }}
        tag_name: ${{ inputs.version }}

    - name: Get major tag info
      id: get-major-tag-info
      if: ${{ inputs.major == 'true' }}
      uses: ovsds/get-tag-info-action@v1
      with:
        github_token: ${{ steps.ensure-token.outputs.github_token }}
        tag_name: ${{ steps.prepare-versions.outputs.major_version }}

    - name: Create major tag ref
      if: ${{ inputs.major == 'true' && steps.get-major-tag-info.outputs.exists == 'false' }}
      shell: bash
      run: |
        # Create major tag ref
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs \
          -F ref=refs/tags/${{ steps.prepare-versions.outputs.major_version }} \
          -F sha=${{ steps.get-tag-info.outputs.commit_sha }}
      env:
        GH_TOKEN: ${{ steps.ensure-token.outputs.github_token }}

    - name: Update major tag ref
      if: ${{ inputs.major == 'true' && steps.get-major-tag-info.outputs.exists == 'true' }}
      shell: bash
      run: |
        # Update major tag ref if exists
        gh api \
          --method PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs/tags/${{ steps.prepare-versions.outputs.major_version }} \
          -F sha=${{ steps.get-tag-info.outputs.commit_sha }}
      env:
        GH_TOKEN: ${{ steps.ensure-token.outputs.github_token }}

    - name: Get minor tag info
      id: get-minor-tag-info
      if: ${{ inputs.minor == 'true' }}
      uses: ovsds/get-tag-info-action@v1
      with:
        github_token: ${{ steps.ensure-token.outputs.github_token }}
        tag_name: ${{ steps.prepare-versions.outputs.minor_version }}

    - name: Create minor tag ref
      if: ${{ inputs.minor == 'true' && steps.get-minor-tag-info.outputs.exists == 'false' }}
      shell: bash
      run: |
        # Create minor tag ref
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs \
          -F ref=refs/tags/${{ steps.prepare-versions.outputs.minor_version }} \
          -F sha=${{ steps.get-tag-info.outputs.commit_sha }}
      env:
        GH_TOKEN: ${{ steps.ensure-token.outputs.github_token }}

    - name: Update minor tag ref
      if: ${{ inputs.minor == 'true' && steps.get-minor-tag-info.outputs.exists == 'true' }}
      shell: bash
      run: |
        # Update minor tag ref if exists
        gh api \
          --method PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs/tags/${{ steps.prepare-versions.outputs.minor_version }} \
          -F sha=${{ steps.get-tag-info.outputs.commit_sha }}
      env:
        GH_TOKEN: ${{ steps.ensure-token.outputs.github_token }}

branding:
  icon: "tag"
  color: "gray-dark"
